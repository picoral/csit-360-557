[
  {
    "objectID": "modules.html",
    "href": "modules.html",
    "title": "Modules",
    "section": "",
    "text": "Topic: Introduction\n\n\n\nSet up your coding environment\nWhat Is Machine Learning?\n\n\n\n\n\nCourse Introduction\nAdvanced Methods Intro\nData\n\n\n\n\n\nBeginning of semester survey"
  },
  {
    "objectID": "modules.html#reading",
    "href": "modules.html#reading",
    "title": "Modules",
    "section": "",
    "text": "Set up your coding environment\nWhat Is Machine Learning?"
  },
  {
    "objectID": "modules.html#slides",
    "href": "modules.html#slides",
    "title": "Modules",
    "section": "",
    "text": "Course Introduction\nAdvanced Methods Intro\nData"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This course website was created by Adriana Picoral and is licensed under the CC BY-NC-SA 4.0 Creative Commons License.\nYou are free to:\n\nShare — copy and redistribute the material in any medium or format.\nAdapt — remix, transform, and build upon the material.\n\nUnder the following terms:\n\nAttribution — You must give appropriate credit, provide a link to the license, and indicate if changes were made.\nNon Commercial — You may not use the material for commercial purposes. (Remove this line if commercial use is permitted.)\nShare Alike — If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original. (Include this if Share Alike applies.)"
  },
  {
    "objectID": "slides-01-01.html#hello",
    "href": "slides-01-01.html#hello",
    "title": "Introduction",
    "section": "Hello",
    "text": "Hello\n\nAdriana Picoral (PhD, you can call me Adriana)\npicorala@montclair.edu\nOffice: Schmitt 374\nOffice hours: Tuesdays and Thursdays, 1:45pm to 3:30pm"
  },
  {
    "objectID": "slides-01-01.html#active-learning",
    "href": "slides-01-01.html#active-learning",
    "title": "Introduction",
    "section": "Active Learning",
    "text": "Active Learning\n\nI expect you to actively participate in class (that does not mean you have to speak to the entire group)\nLots of hands-on activities and discussions\nWe will be using Gradescope (more on this later) to submit in-class work and for homework assignments"
  },
  {
    "objectID": "slides-01-01.html#ice-breaker",
    "href": "slides-01-01.html#ice-breaker",
    "title": "Introduction",
    "section": "Ice Breaker",
    "text": "Ice Breaker\n\nFind at least one person to talk to.\nIntroduce yourself (name, major/program, anything else you’d like to share)\nWhat is something you are good at and that took many hours of practice?"
  },
  {
    "objectID": "slides-01-01.html#course-overview",
    "href": "slides-01-01.html#course-overview",
    "title": "Introduction",
    "section": "Course Overview",
    "text": "Course Overview\n\nIntroduction to advanced techniques in Data Science\nFocus on both concepts and examples\nFocus on hands-on, bring a laptop to class if you have one\nFocus on real data in assignments"
  },
  {
    "objectID": "slides-01-01.html#course-overview-1",
    "href": "slides-01-01.html#course-overview-1",
    "title": "Introduction",
    "section": "Course Overview",
    "text": "Course Overview\nWhat is missing in this image?"
  },
  {
    "objectID": "slides-01-01.html#course-overview-2",
    "href": "slides-01-01.html#course-overview-2",
    "title": "Introduction",
    "section": "Course Overview",
    "text": "Course Overview\nTopics:\n\nReview the cycle of data science: data wrangling, and visualization\nMajor topics: how to make data-driven inferences and decisions by using fundamental techniques in machine learning and neural networks"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CSIT-360-557 Syllabus",
    "section": "",
    "text": "Course Information\n\nMonday and Wednesday, 12:00 – 1:25pm\nMode: in-person, at School of Business 011\n\n\n\nCourse Description\nThis course provides the advanced techniques in Data Science. After learning data manipulating, processing, cleaning, and visualization, the major goals of this course are to learn how to make data-driven inferences and decisions by using fundamental techniques in machine learning, in Python language.\n\n\nInstructor\n\nAdriana Picoral, PhD\nOffice: Schmitt 374\nemail: picorala@montclair.edu\nOffice Hours (open door/drop in):\n\nTuesdays and Thursdays, 1:45pm to 3:30pm\n\n\n\n\nCourse Outcomes\nUpon completion of the course, students should be able to:\n\nCO1: understand the concepts and various phases of Data Science\nCO2: understand how to use Python data science libraries to demonstrate the data science skills and visualize data\nCO3: understand the concepts of fundamental techniques in machine learning and neural networks\nCO4: implement techniques of machine learning algorithms on data analysis using advanced libraries such as sci-kit learn and TensorFlow in Python\nCO5: apply data science concepts and skills to solve problems with real-world data sets\n\n\n\nCourse Schedule\n\n\n\n\n\n\nWeek\nStart Date\nTopic\n\n\n\n\n01\nJanuary 22\nIntroduction\n\n\n02\nJanuary 29\nPython Review\n\n\n03\nFeb 05\nNumpy & Pandas\n\n\n04\nFebruary 12\nData Wrangling\n\n\n05\nFebruary 19\nSupervised Learning\n\n\n06\nFebruary 26\nSupervised Learning\n\n\n07\nMarch 05\nSupervised Learning\n\n\n08\nMarch 17\nSupervised Learning\n\n\n09\nMarch 24\nSupervised Learning\n\n\n10\nMarch 31\nUnsupervised Learning\n\n\n11\nApril 07\nUnsupervised Learning\n\n\n12\nApril 14\nUnsupervised Learning\n\n\n13\nApril 21\nOther Advanced Techniques\n\n\n14\nApril 28\nFinal Project Presentations\n\n\n\n\n\n\n\n\nGrading Breakdown\n\n\n\nAssessment Element\nPercentage of Final Grade\n\n\n\n\nHomework Assignments\n20%\n\n\nProjects\n20%\n\n\nQuizzes (5)\n30%\n\n\nGroup Project\n20%\n\n\nProject Presentation\n10%\n\n\n\n\n\nLate Work Policy\nStudents are expected to complete work on schedule. The late policy for all assignments is as follows:\n\n20% points off if submitted within 24 hours after the due date\n30% off if submitted 24-48 hours after the due date\nNo credit if submitted two days or more days after the due date unless prior arrangements are made with the instructor with acceptable reasons.\n\nNote: This is a firm policy and it will be automatically applied\n\n\nAttendance Policy\nAttendance is mandatory. All students must sign an attendance sheet at the beginning of class. Excused absences include illness or a serious personal crisis (a letter from the Dean of students is required). If you are missing class and have a reasonable excuse, contact me before lecture if you want to make up missed assessments.\n\n\nGrading Scale\n\n\n\nLetter Grade\nGrade Percentage\n\n\n\n\nA\n94-100%\n\n\nA-\n90-93%\n\n\nB+\n87-89%\n\n\nB\n84-86%\n\n\nB-\n80-83%\n\n\nC+\n77-79%\n\n\nC\n74-76%\n\n\nC-\n70-73%\n\n\nD+ (undergraduate only)\n67-69%\n\n\nD (undergraduate only)\n64-66%\n\n\nD- (undergraduate only)\n60-63%\n\n\nF\n0-59%\n\n\n\n\n\nAcademic Honesty and Integrity\nAcademic Honesty is a core University value. Take time to understand the University’s policy. Your questions about academic honesty are always welcome.\nAll work you submit for grading in this course must be your own. Submitting work that includes (minor and/or major) components that are not your own work is considered plagiarism. I recommend that when talking with others about the assignment, do not write anything down.\nKeep in mind that all assignments and practice problems provided in this course are meant to help you practice the skills that you will need to do well in all assessments (including on paper quizzes), so it is generally in your best interest to avoid taking shortcuts even on practice problems (which are ungraded).\nSharing your code with others (in addition to copying code from others) is considered a break of the academic integrity code (unauthorized assistance) as well.\n\n\nLand Acknowledgement\nWe respectfully acknowledge that Montclair State University occupies land in Lenapehoking, the traditional and expropriated territory of the Lenape. As a state institution, we recognize and support the sovereignty of New Jersey’s three state-recognized tribes: the Ramapough Lenape, Nanticoke Lenni-Lenape, and Powhatan Renape nations.\nWe recognize the sovereign nations of the Lenape diaspora elsewhere in North America, as well as other Indigenous individuals and communities now residing in New Jersey. By offering this land acknowledgement, we commit to addressing the historical legacies of Indigenous dispossession and dismantling practices of erasure that persist today. We recognize the resilience and persistence of contemporary Indigenous communities and their role in educating all of us about justice, equity, and the stewardship of the land throughout the generations.\n\n\nSubject to Change\nChanges may be made to this syllabus as needed to support student learning. Any updates will be announced in class or through course materials with advance notice."
  },
  {
    "objectID": "environment.html",
    "href": "environment.html",
    "title": "Coding Environment",
    "section": "",
    "text": "We will be applying the concepts in this course to hands-on coding applications using real world data. For this, you need to have Python 3.8+ installed in your computer (or a computer that you have access to). I also recommend using Visual Studio Code for your development environment. That is what I will be using during class demonstrations and lecture materials.\nAfter installing and opening VS code, go to the File menu option and then select the Open Folder... option. Open an empty folder that you created, and that you know the location of in your computer. Create a new file that ends with the .py extension. If you do not have Python install in your machine, VS code will prompt you to install it.\nFor the next step you will need to have bash in your machine. If you have a windows machine, you will have to install bash – I recommend you install git bash.\nNext step is to install sckit-learn, one of the packages that we will be working with in this course. To do this, you can open a bash terminal in your VS code and type the following:\npip install -U scikit-learn\nWait and read the terminal standard output to check if the installation was completed successfully."
  },
  {
    "objectID": "slides-01-01.html#coding-tools",
    "href": "slides-01-01.html#coding-tools",
    "title": "Introduction",
    "section": "Coding tools",
    "text": "Coding tools\n\nWe will be coding in Python for this class.\nFor next lecture (Monday) you are expected to have set up your coding environment."
  },
  {
    "objectID": "slides-01-01.html#what-is-machine-learning",
    "href": "slides-01-01.html#what-is-machine-learning",
    "title": "Introduction",
    "section": "What is Machine Learning?",
    "text": "What is Machine Learning?\n\nsubfield of computer science + statistics\nbuilding algorithms/models based on data (i.e. collection of examples of some phenomenon)"
  },
  {
    "objectID": "slides-01-01.html#types-of-machine-learning",
    "href": "slides-01-01.html#types-of-machine-learning",
    "title": "Introduction",
    "section": "Types of Machine Learning",
    "text": "Types of Machine Learning\n\nsupervised (labeled data)\nsemi-supervised (both labeled and unlabeled data)\nunsupervised (unlabeled data)\nreinforcement (reward system, with the goal of learning a policy)\n\nFor all of these, data is required"
  },
  {
    "objectID": "slides-01-02.html#tidy-data",
    "href": "slides-01-02.html#tidy-data",
    "title": "Data",
    "section": "Tidy Data",
    "text": "Tidy Data\nThe data we will be working with contains variables as columns and observations as rows"
  },
  {
    "objectID": "slides-01-02.html#matrices-and-vectors",
    "href": "slides-01-02.html#matrices-and-vectors",
    "title": "Data",
    "section": "Matrices and Vectors",
    "text": "Matrices and Vectors\nFor machine learning, we have a feature matrix that contains all of our predictor variables, and a target vector that contains the label or target for each observation."
  },
  {
    "objectID": "slides-01-02.html#what-is-machine-learning",
    "href": "slides-01-02.html#what-is-machine-learning",
    "title": "Advanced Methods in Data Science",
    "section": "What is Machine Learning?",
    "text": "What is Machine Learning?\n\nsubfield of computer science + statistics\nbuilding algorithms/models based on data (i.e. collection of examples of some phenomenon)"
  },
  {
    "objectID": "slides-01-02.html#types-of-machine-learning",
    "href": "slides-01-02.html#types-of-machine-learning",
    "title": "Advanced Methods in Data Science",
    "section": "Types of Machine Learning",
    "text": "Types of Machine Learning\n\nsupervised (labeled data)\nsemi-supervised (both labeled and unlabeled data)\nunsupervised (unlabeled data)\nreinforcement (reward system, with the goal of learning a policy)\n\nFor all of these, data is required – one important step is feature engineering (how to transform data into feature – more on this later)\nDepending on the target type, classification or regression"
  },
  {
    "objectID": "slides-01-02.html#supervised-learning",
    "href": "slides-01-02.html#supervised-learning",
    "title": "Advanced Methods in Data Science",
    "section": "Supervised Learning",
    "text": "Supervised Learning\n\nLabeled data – input (features), output (target, response)\n\nCan you think of examples of supervised learning?"
  },
  {
    "objectID": "slides-01-02.html#supervised-learning-1",
    "href": "slides-01-02.html#supervised-learning-1",
    "title": "Advanced Methods in Data Science",
    "section": "Supervised Learning",
    "text": "Supervised Learning\n\nExample: spam vs. not spam\n\nWhat features can we use?"
  },
  {
    "objectID": "slides-01-02.html#supervised-learning-algorithms",
    "href": "slides-01-02.html#supervised-learning-algorithms",
    "title": "Advanced Methods in Data Science",
    "section": "Supervised Learning Algorithms",
    "text": "Supervised Learning Algorithms\n\nSupport Vector Machines (SVM)\nDecision Tree/Random Forest\nLogistic Regression\nLinear Regression\nNaive Bayes\nK-Nearest Neighbors\n\nHow to decide?"
  },
  {
    "objectID": "slides-01-02.html#unsupervised-learning",
    "href": "slides-01-02.html#unsupervised-learning",
    "title": "Advanced Methods in Data Science",
    "section": "Unsupervised Learning",
    "text": "Unsupervised Learning\n\nClustering (K-Means)\nPrincipal Component Analysis (Dimensionality Reduction)"
  },
  {
    "objectID": "slides-01-02.html#reinforcement-learning",
    "href": "slides-01-02.html#reinforcement-learning",
    "title": "Advanced Methods in Data Science",
    "section": "Reinforcement Learning",
    "text": "Reinforcement Learning\n\nRecommendation Systems (users give feed on whether a recommendation was good or not)\nAutomated Robots\nAutonomous Driving\nNatural Language Processing – text prediction, translation"
  },
  {
    "objectID": "slides-01-03.html#data",
    "href": "slides-01-03.html#data",
    "title": "Data",
    "section": "Data",
    "text": "Data\nThe data we will be working with contains variables as columns and observations as rows (often called tidy data)\nFeature engineering: data –&gt; features\nRemember the spam vs not spam example? How do we go from words to features?"
  },
  {
    "objectID": "slides-01-03.html#data-quality",
    "href": "slides-01-03.html#data-quality",
    "title": "Data",
    "section": "Data quality",
    "text": "Data quality\nWhat to look for:\n\na data dictionary\ninformation on how the data were collected"
  },
  {
    "objectID": "slides-01-03.html#data-format",
    "href": "slides-01-03.html#data-format",
    "title": "Data",
    "section": "Data format",
    "text": "Data format\n\ntabular – tables, rows and columns\nhierachical – values are nested (like a tree)\nunstructured data – no structure, for example: emails, videos, pictures"
  },
  {
    "objectID": "slides-01-03.html#tabular-data",
    "href": "slides-01-03.html#tabular-data",
    "title": "Data",
    "section": "Tabular Data",
    "text": "Tabular Data\nRows and Columns\n\n\n\nDay\nHigh\nLow\nWind\nForecast\n\n\n\n\nTuesday\n24\n15\n0 to 15 mph\nSunny\n\n\nWednesday\n38\n17\n5 to 15 mph\nMostly Sunny\n\n\nThursday\n34\n13\n5 to 15 mph\nMostly Sunny"
  },
  {
    "objectID": "slides-01-03.html#hierachical-data",
    "href": "slides-01-03.html#hierachical-data",
    "title": "Data",
    "section": "Hierachical Data",
    "text": "Hierachical Data\nTuesday:\n   ↳ Temperature:\n      ↳ Low: 15\n      ↳ High: 24\n   ↳ Wind:\n      ↳ Speed: 0 to 15 mph \n      ↳ Direction: West\nWednesday:\n   ↳ Temperature:\n      ↳ Low: 17\n      ↳ High: 38\n   ↳ Wind:\n      ↳ Speed: 5 to 15 mph\n      ↳ Direction: North West"
  },
  {
    "objectID": "slides-01-03.html#unstructured-data",
    "href": "slides-01-03.html#unstructured-data",
    "title": "Data",
    "section": "Unstructured Data",
    "text": "Unstructured Data\nOne winter, I became very quiet\nand saw my life. It was February\n\nand outside in the city streets,\nsnow fell but would not collect.\n\nI bought snapdragons and thistle,\ngot some discount peach roses\n\nthat smelled off. I split them\nbetween vases and moved\n\nthe bouquets from room to room\nwhile a violin solo rang out.\nfull poem"
  },
  {
    "objectID": "slides-01-03.html#matrices-and-vectors",
    "href": "slides-01-03.html#matrices-and-vectors",
    "title": "Data",
    "section": "Matrices and Vectors",
    "text": "Matrices and Vectors\nFor machine learning, we have a feature matrix that contains all of our predictor variables, and a target vector that contains the label or target for each observation."
  },
  {
    "objectID": "slides-01-03.html#training-validation-and-testing",
    "href": "slides-01-03.html#training-validation-and-testing",
    "title": "Data",
    "section": "Training, Validation and Testing",
    "text": "Training, Validation and Testing\nWe usually need enough data to split it into training and validation (and testing)\n\nMost of our data will be used to build our model (training)\nWe never predict data that was in our training data set\nOur validation data set is used to fine tune our model (we can also do cross-validation)\nThe test data set is used to assess the final mode that has been selected during the validation process\n\nThe goal is to not overfit our data to our model"
  },
  {
    "objectID": "slides-01-02.html",
    "href": "slides-01-02.html",
    "title": "Advanced Methods in Data Science",
    "section": "",
    "text": "What is it? (discuss)\n\n\n\nsubfield of computer science + statistics\nbuilding algorithms/models based on data (i.e. collection of examples of some phenomenon)\n\n\n\n\n\nsupervised (labeled data) – classification and regression\nsemi-supervised (both labeled and unlabeled data)\nunsupervised (unlabeled data)\nreinforcement (reward system, with the goal of learning a policy)\n\nFor all of these, data is required – one important step is feature engineering (how to transform data into feature – more on this later)\n\n\n\n\nLabeled data – input (features), output (target, response)\n\nCan you think of examples of supervised learning?\n\n\n\n\nExample: spam vs. not spam\n\nWhat features can we use?\n\n\n\n\nSupport Vector Machines (SVM)\nDecision Tree/Random Forest\nLogistic Regression\nLinear Regression\nNaive Bayes\nK-Nearest Neighbors\n\nHow to decide?\n\n\n\n\nClustering (K-Means)\nPrincipal Component Analysis (Dimensionality Reduction)\n\n\n\n\n\nRecommendation Systems (users give feed on whether a recommendation was good or not)\nAutomated Robots\nAutonomous Driving\nNatural Language Processing – text prediction, translation"
  },
  {
    "objectID": "slides-01-01.html",
    "href": "slides-01-01.html",
    "title": "Introduction",
    "section": "",
    "text": "Adriana Picoral (PhD, you can call me Adriana)\npicorala@montclair.edu\nOffice:\nOffice hours: Tuesdays and Thursdays, 1:45pm to 3:30pm"
  },
  {
    "objectID": "environment.html#trouble-shooting",
    "href": "environment.html#trouble-shooting",
    "title": "Coding Environment",
    "section": "Trouble Shooting",
    "text": "Trouble Shooting\n\nRun where python and which python to find which Python installation your terminal has associated with different python aliases.\nYou can install a package to a specific python installation by running something like this: /usr/local/bin/python3 -m pip install statsmodels"
  },
  {
    "objectID": "environment.html#troubleshooting",
    "href": "environment.html#troubleshooting",
    "title": "Coding Environment",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nRun where python and which python to find which Python installation your terminal has associated with different python aliases.\nYou can install a package to a specific python installation by running something like this: /usr/local/bin/python3 -m pip install statsmodels"
  },
  {
    "objectID": "modules.html#assignments",
    "href": "modules.html#assignments",
    "title": "Modules",
    "section": "",
    "text": "Beginning of semester survey"
  },
  {
    "objectID": "slides-01-03.html#practice",
    "href": "slides-01-03.html#practice",
    "title": "Data",
    "section": "Practice",
    "text": "Practice\n\nAccess this kaggle dataset on house prices\nWhat are the variables in the data? (is there a data dictionary?)\nWhat is this data set from? What’s its source?\nAny problems you see with it?\nWhich variable could we use as target (response)?\nWhich variables would you use as features? Any feature engineering you can think of?"
  },
  {
    "objectID": "modules.html#video-lessons",
    "href": "modules.html#video-lessons",
    "title": "Modules",
    "section": "Video Lessons",
    "text": "Video Lessons\n\nOpening data files in VS Code Passcode: Uu5.@XE*"
  },
  {
    "objectID": "pandas-reference.html",
    "href": "pandas-reference.html",
    "title": "Pandas – reference sheet",
    "section": "",
    "text": "Import the package\n\nimport pandas\n\nYou can provide a shorter alias, which makes it easier to type\n\nimport pandas as pd\n\n\n\nLoad Data"
  },
  {
    "objectID": "slides-02-01.html",
    "href": "slides-02-01.html",
    "title": "Intro to Pandas",
    "section": "",
    "text": "Open a folder (that you have created, with the data we are going to be using) in VS code"
  },
  {
    "objectID": "slides-02-01.html#import-the-package",
    "href": "slides-02-01.html#import-the-package",
    "title": "Intro to Pandas",
    "section": "Import the package",
    "text": "Import the package\n\nimport pandas\n\nYou can provide a shorter alias, which makes it easier to type\n\nimport pandas as pd"
  },
  {
    "objectID": "slides-02-01.html#load-data",
    "href": "slides-02-01.html#load-data",
    "title": "Intro to Pandas",
    "section": "Load Data",
    "text": "Load Data\nLet’s use this kaggle dataset on house prices as an example. I downloaded the data and saved it in a folder called data.\n\ndata_frame = pd.read_csv(\"data/US houuse price of 10 states.csv\")"
  },
  {
    "objectID": "slides-02-01.html#inspect-the-data",
    "href": "slides-02-01.html#inspect-the-data",
    "title": "Intro to Pandas",
    "section": "Inspect the data",
    "text": "Inspect the data\n\ndata_frame.head()\ndata_frame.info()\ndata_frame.describe()\ndata_frame.shape\ndata_frame.columns\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 12075 entries, 0 to 12074\nData columns (total 10 columns):\n #   Column      Non-Null Count  Dtype \n---  ------      --------------  ----- \n 0   date        12075 non-null  object\n 1   house_size  11107 non-null  object\n 2   bed         11410 non-null  object\n 3   bath        11410 non-null  object\n 4   price       11009 non-null  object\n 5   broker      9569 non-null   object\n 6   street      12075 non-null  object\n 7   city        12075 non-null  object\n 8   state_name  12075 non-null  object\n 9   zip_code    12075 non-null  int64 \ndtypes: int64(1), object(9)\nmemory usage: 943.5+ KB\n\n\nIndex(['date', 'house_size', 'bed', 'bath', 'price', 'broker', 'street',\n       'city', 'state_name', 'zip_code'],\n      dtype='object')"
  },
  {
    "objectID": "slides-02-01.html#setting-up-your-coding-environment",
    "href": "slides-02-01.html#setting-up-your-coding-environment",
    "title": "Intro to Pandas",
    "section": "Setting up your coding environment",
    "text": "Setting up your coding environment\nOpen a folder (that you have created, with the data we are going to be using) in VS code"
  },
  {
    "objectID": "slides-02-01.html#inspect-variables",
    "href": "slides-02-01.html#inspect-variables",
    "title": "Intro to Pandas",
    "section": "Inspect variables",
    "text": "Inspect variables\n\ndata_frame[\"bed\"].head()\ndata_frame[[\"bed\", \"bath\"]].head()\n\n\n\n\n\n\n\n\nbed\nbath\n\n\n\n\n0\n4bd\n4bd\n\n\n1\n2bd\n2bd\n\n\n2\n3bd\n3bd\n\n\n3\nStudio\nStudio\n\n\n4\n3bd\n3bd"
  },
  {
    "objectID": "slides-02-01.html#inspect-variables-1",
    "href": "slides-02-01.html#inspect-variables-1",
    "title": "Intro to Pandas",
    "section": "Inspect variables",
    "text": "Inspect variables\n\ndata_frame[\"bed\"].count() # number of non-null values\ndata_frame[\"bed\"].nunique() # count of unique values\ndata_frame[\"bed\"].value_counts() # count for each unique value\n\nbed\n3bd       5172\n4bd       2998\n2bd       1797\n5bd        762\n1bd        290\nStudio     153\n6bd        150\n7bd         31\n8bd         31\n9bd          9\n12bd         4\n10bd         3\n14bd         2\n21bd         2\n15bd         2\n11bd         2\n16bd         1\n13bd         1\nName: count, dtype: int64"
  },
  {
    "objectID": "slides-02-01.html#pandas.series.str",
    "href": "slides-02-01.html#pandas.series.str",
    "title": "Intro to Pandas",
    "section": "pandas.Series.str",
    "text": "pandas.Series.str\nA pandas.Series is one column in our data frame\nRead the documentation on pandas.Series.str – how can we create a numeric variable based on the \"bed\" column?"
  },
  {
    "objectID": "modules.html#video-lesson",
    "href": "modules.html#video-lesson",
    "title": "Modules",
    "section": "Video Lesson",
    "text": "Video Lesson\n\nOpening data files in VS Code Passcode: Uu5.@XE*"
  },
  {
    "objectID": "modules.html#slides-1",
    "href": "modules.html#slides-1",
    "title": "Modules",
    "section": "Slides",
    "text": "Slides\n\nIntro to Pandas\nIntro to Seaborn\nRegular Expressions"
  },
  {
    "objectID": "slides-02-02.html#set-up-your-coding-environment",
    "href": "slides-02-02.html#set-up-your-coding-environment",
    "title": "Intro to Seaborn",
    "section": "Set up your coding environment",
    "text": "Set up your coding environment\n\nCreate a new .ipynb in your VS code folder.\nYou might need to run pip install notebook (python3 -m pip install notebook)\nYou also might need to run pip install jupyterlab"
  },
  {
    "objectID": "slides-02-02.html#import-the-libraries-we-will-be-using",
    "href": "slides-02-02.html#import-the-libraries-we-will-be-using",
    "title": "Intro to Seaborn",
    "section": "Import the libraries we will be using",
    "text": "Import the libraries we will be using\n\nimport seaborn as sns\n\nMake sure you import pandas and read the data in:\n\nimport pandas as pd\ndata_frame = pd.read_csv(\"data/US houuse price of 10 states.csv\")"
  },
  {
    "objectID": "slides-02-02.html#scatter-plot",
    "href": "slides-02-02.html#scatter-plot",
    "title": "Intro to Seaborn",
    "section": "Scatter plot",
    "text": "Scatter plot\n\nsns.scatterplot(data = data_frame, x = \"bed_numeric\", y = \"price_numeric\")"
  },
  {
    "objectID": "slides-02-02.html",
    "href": "slides-02-02.html",
    "title": "Intro to Seaborn",
    "section": "",
    "text": "Create a new .ipynb in your VS code folder.\nYou might need to run pip install notebook (python3 -m pip install notebook)\nYou also might need to run pip install jupyterlab"
  },
  {
    "objectID": "slides-02-01.html#filtering-the-data",
    "href": "slides-02-01.html#filtering-the-data",
    "title": "Intro to Pandas",
    "section": "Filtering the data",
    "text": "Filtering the data\n\ndata_frame[data_frame[\"bed\"] == \"3bd\"]\n\n\n\n\n\n\n\n\ndate\nhouse_size\nbed\nbath\nprice\nbroker\nstreet\ncity\nstate_name\nzip_code\n\n\n\n\n2\nAUG 29, 2024\n1,926 sqft (on 0.45 acres)\n3bd\n3bd\n$375,000\nColdwell Banker Hartung\n6761 Landover Cir\nTallahassee\nFlorida\n32317\n\n\n4\nAUG 29, 2024\n1,205 sqft\n3bd\n3bd\n$233,900\nD R Horton Realty of NW Florida, LLC\n6274 June Bug Dr\nMilton\nFlorida\n32583\n\n\n14\nAUG 28, 2024\n1,820 sqft\n3bd\n3bd\n$330,500\nEXP Realty, LLC\n8564 Westview Ln\nPensacola\nFlorida\n32514\n\n\n15\nAUG 28, 2024\n1,370 sqft\n3bd\n3bd\n$173,000\nBetter Homes And Gardens Real Estate Main Stre...\n6905 Woodley Dr\nPensacola\nFlorida\n32503\n\n\n17\nAUG 28, 2024\n2,681 sqft (on 1.82 acres)\n3bd\n3bd\n$525,000\nAmerican Valor Realty LLC\n8021 Quiet Dr\nPensacola\nFlorida\n32526\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n12059\nAUG 30, 2024\n2,610 sqft\n3bd\n3bd\n$1,143,909\nBALBOA REAL ESTATE, INC.\n50525 Spyglass Hill Dr\nLa Quinta\nCA\n92253\n\n\n12063\nAUG 30, 2024\n1,983 sqft (on 1 acre)\n3bd\n3bd\n$1,385,000\nCompass\n10241 McBroom St\nSunland\nCA\n91040\n\n\n12065\nAUG 30, 2024\n1,757 sqft\n3bd\n3bd\n$568,000\nBerkshire Hathaway Home Serv.\n26848 Hanford St\nMenifee\nCA\n92584\n\n\n12069\nAUG 30, 2024\n2,000 sqft\n3bd\n3bd\n$1,880,000\nReal Estate Legends USA\n16 Riveroaks\nIrvine\nCA\n92602\n\n\n12074\nAUG 30, 2024\n1,615 sqft\n3bd\n3bd\n$508,000\nStarlitloan&Realty\n1668 Ravenswood Rd\nBeaumont\nCA\n92223\n\n\n\n\n5172 rows × 10 columns"
  },
  {
    "objectID": "slides-02-01.html#handling-missing-data-drop-missing-data",
    "href": "slides-02-01.html#handling-missing-data-drop-missing-data",
    "title": "Intro to Pandas",
    "section": "Handling Missing Data – drop missing data",
    "text": "Handling Missing Data – drop missing data\nDocumentation on .dropna()\n\ndata_frame.dropna()\n\n\n\n\n\n\n\n\ndate\nhouse_size\nbed\nbath\nprice\nbroker\nstreet\ncity\nstate_name\nzip_code\n\n\n\n\n2\nAUG 29, 2024\n1,926 sqft (on 0.45 acres)\n3bd\n3bd\n$375,000\nColdwell Banker Hartung\n6761 Landover Cir\nTallahassee\nFlorida\n32317\n\n\n3\nAUG 29, 2024\n1,132 sqft\nStudio\nStudio\n$190,000\nEXP Realty, LLC\n1701 S Fairfield Dr\nPerdido Key\nFlorida\n32507\n\n\n4\nAUG 29, 2024\n1,205 sqft\n3bd\n3bd\n$233,900\nD R Horton Realty of NW Florida, LLC\n6274 June Bug Dr\nMilton\nFlorida\n32583\n\n\n5\nAUG 29, 2024\n3,044 sqft (on 0.34 acres)\n4bd\n4bd\n$416,402\nADAMS HOME REALTY, INC\n6528 Benelli Dr\nMilton\nFlorida\n32570\n\n\n13\nAUG 28, 2024\n1,254 sqft\n2bd\n2bd\n$250,000\nJANET COULTER REALTY\n520 Richard Jackson Blvd #2810\nPanama City Beach\nFlorida\n32407\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n12067\nAUG 30, 2024\n2,352 sqft\n4bd\n4bd\n$795,000\nRealty Masters\n12549 Navel Ct\nRiverside\nCA\n92503\n\n\n12069\nAUG 30, 2024\n2,000 sqft\n3bd\n3bd\n$1,880,000\nReal Estate Legends USA\n16 Riveroaks\nIrvine\nCA\n92602\n\n\n12070\nAUG 30, 2024\n3,835 sqft\n5bd\n5bd\n$1,935,000\nRealty ONE Group Pacific\n1154 Via Vera Cruz\nSan Marcos\nCA\n92078\n\n\n12072\nAUG 30, 2024\n2,616 sqft\n4bd\n4bd\n$685,000\nAnderson Real Estate Group\n5509 W Modoc Avenue\nVisalia\nCA\n93291\n\n\n12074\nAUG 30, 2024\n1,615 sqft\n3bd\n3bd\n$508,000\nStarlitloan&Realty\n1668 Ravenswood Rd\nBeaumont\nCA\n92223\n\n\n\n\n8068 rows × 10 columns"
  },
  {
    "objectID": "slides-02-01.html#handling-missing-data-fill-missing-data",
    "href": "slides-02-01.html#handling-missing-data-fill-missing-data",
    "title": "Intro to Pandas",
    "section": "Handling Missing Data – fill missing data",
    "text": "Handling Missing Data – fill missing data\nDocumentation on .fillna()\n\ndata_frame.fillna(0)\ndata_frame.ffill()\ndata_frame.bfill()\ndata_frame.fillna(data_frame.mean())\ndata_frame[\"bed_numeric\"].fillna(data_frame[\"bed_numeric\"].mean())"
  },
  {
    "objectID": "slides-02-03.html#regex",
    "href": "slides-02-03.html#regex",
    "title": "Regular Expressions",
    "section": "Regex",
    "text": "Regex\nRegular expressions are:\n\npatterns used to match and manipulate text strings"
  },
  {
    "objectID": "slides-02-03.html#other-syntax",
    "href": "slides-02-03.html#other-syntax",
    "title": "Regular Expressions",
    "section": "Other syntax",
    "text": "Other syntax\n\n\\d - matches any digit (0-9)\n\\w - matches any word character (a-z, A-Z, 0-9, _)\n\\s - matches any whitespace character (space, tab, newline)\n[] used to indicate a set of characters.\n{m} matches m times\n{m,n} matches m to n times\n\ne.g., lower case letters: [a-z], upper case letters: [A-Z]"
  },
  {
    "objectID": "slides-02-03.html#python-examples",
    "href": "slides-02-03.html#python-examples",
    "title": "Regular Expressions",
    "section": "Python examples",
    "text": "Python examples\nEmail validation pattern:\n\npattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n\nPhone number pattern (US format):\n\npattern = r'\\d{3}-\\d{3}-\\d{4}'"
  },
  {
    "objectID": "slides-02-03.html#basic-patterns",
    "href": "slides-02-03.html#basic-patterns",
    "title": "Regular Expressions",
    "section": "Basic Patterns",
    "text": "Basic Patterns\n\nLiteral characters match themselves (“cat” matches “cat”)\nSpecial characters have specific meanings:\n\n. (dot) - matches any single character except newline\n* matches 0 or more of the previous character\n+ matches 1 or more of the previous character\n? - matches 0 or 1 of the previous character\n^ - matches start of line\n$ - matches end of line"
  },
  {
    "objectID": "slides-02-03.html#examples",
    "href": "slides-02-03.html#examples",
    "title": "Regular Expressions",
    "section": "Examples",
    "text": "Examples\n[abc] - matches any single character from the set (a, b, or c)\n[^abc] - matches any single character NOT in the set"
  }
]